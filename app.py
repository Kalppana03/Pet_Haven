import random
from flask import Flask, render_template, jsonify, send_file
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)  # ✅ Define only once

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///petheaven2.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)  # ✅ Initialize `db` after defining `app`

from sqlalchemy.sql import text
import matplotlib.pyplot as plt
import pandas as pd
from sqlalchemy import text

def get_revenue_data():
    """
    Fetches revenue insights using raw SQL queries.
    """
    with app.app_context():
        # Total revenue
        total_revenue = db.session.execute(text("SELECT SUM(service_price) FROM booking_detail")).scalar() or 0

        # Most frequently booked service
        most_booked_service = db.session.execute(
            text("SELECT service_name FROM booking_detail GROUP BY service_name ORDER BY COUNT(booking_detail_id) DESC LIMIT 1")
        ).scalar()

        # Least frequently booked service
        least_booked_service = db.session.execute(
            text("SELECT service_name FROM booking_detail GROUP BY service_name ORDER BY COUNT(booking_detail_id) ASC LIMIT 1")
        ).scalar()

        # Revenue generated by each service
        service_revenue = db.session.execute(
            text("SELECT service_name, SUM(service_price) AS total_revenue FROM booking_detail GROUP BY service_name ORDER BY total_revenue DESC")
        ).fetchall()

        # Formatting the result
        revenue_per_service = {service: revenue for service, revenue in service_revenue}

        return {
            "total": int(total_revenue),
            "max_service": most_booked_service,
            "min_service": least_booked_service,
            "revenue_per_service": revenue_per_service
        }

import matplotlib.pyplot as plt
def generate_revenue_graph():
    
    result=get_revenue_data()
    # Given revenue data
    revenue_per_service = result["revenue_per_service"]
    # Extract service names and revenues
    services = list(revenue_per_service.keys())
    revenues = list(revenue_per_service.values())
    
    # Plot bar chart
    plt.figure(figsize=(10, 5))
    plt.bar(services, revenues, color='skyblue')
    
    # Add labels and title
    plt.xlabel('Service')
    plt.ylabel('Revenue ($)')
    plt.title('Top 5 Revenue-Generating Services')
    plt.xticks(rotation=45)
    plt.savefig('static/revenue_graph.png')
    plt.close()


def get_booking_data():
    with app.app_context():
        sql_query = text("""
            SELECT 
                strftime('%Y', booking_date) AS year,
                strftime('%m', booking_date) AS month,
                COUNT(booking_id) AS total_bookings
            FROM booking
            GROUP BY year, month
            ORDER BY year, month;
        """)

        result = db.session.execute(sql_query).fetchall()

        # Convert result to a Pandas DataFrame
        df = pd.DataFrame(result, columns=["year", "month", "total_bookings"])

        # Convert month number to month name (Jan, Feb, etc.)
        df["month"] = df["month"].astype(int)  # Convert to integer for sorting
        df["month_name"] = df["month"].apply(lambda x: pd.to_datetime(f"2024-{x}-01").strftime("%b"))  # Get month abbreviation
        print(jsonify(df.to_dict(orient="records")))
        return df.to_dict(orient="records"),df

def generate_booking_trend():
    df = get_booking_data()[1]

    plt.figure(figsize=(10, 5))

    # Grouping by year to plot multiple lines if needed
    for year in df["year"].unique():
        yearly_data = df[df["year"] == year]
        plt.plot(yearly_data["month_name"], yearly_data["total_bookings"], marker="o", linestyle="-", label=f"Year {year}")

    # Labels and title
    plt.xlabel("Month")
    plt.ylabel("Total Bookings")
    plt.title("Monthly Booking Trends")
    plt.xticks(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])  # Fixed order
    plt.legend()
    plt.grid(True)
    plt.savefig('static/booking_trend.png')

def fetch_recent_bookings():
    with app.app_context():
        sql_query = text("""
            SELECT bd.booking_detail_id, bd.booking_id, bd.service_name, b.user_id, b.booking_date
            FROM booking_detail bd
            JOIN booking b ON bd.booking_id = b.booking_id
            ORDER BY b.booking_date DESC
            LIMIT 5;
        """)

        result = db.session.execute(sql_query)
        last_5_bookings = result.fetchall()

        user_ids = [row.user_id for row in last_5_bookings]

        if user_ids:
            user_id_placeholders = ", ".join([f":id{i}" for i in range(len(user_ids))])

            user_query = text(f"""
                SELECT user_id, user_name
                FROM user
                WHERE user_id IN ({user_id_placeholders});
            """)

            user_params = {f"id{i}": user_id for i, user_id in enumerate(user_ids)}
            user_result = db.session.execute(user_query, user_params)

            # Debugging: Print column names
            for row in user_result:
                print(row._asdict())  # ✅ Correct way to print row contents

            # Creating user mapping correctly
            user_map = {row["user_id"]: row["user_name"] for row in user_result.mappings().all()}

            final_data = [
                {
                    "user_name": user_map.get(row.user_id, "Unknown"),
                    "service_name": row.service_name,
                    "booking_date": row.booking_date,
                }
                for row in last_5_bookings
            ]
        else:
            final_data = []

        return final_data
    
# Route for the main dashboard (practice1.html)
@app.route('/')
def home():
    return render_template('practice1.html')

# Route for the Monthly Trends page (practice2.html)
@app.route('/monthly-trends')
def monthly_trends():
    return render_template('practice2.html')

# API endpoint for revenue data
@app.route('/data/revenue')
def revenue_data():
    data = get_revenue_data()
    return jsonify(data)

# API endpoint for booking trends data
@app.route('/data/booking')
def booking_data():
    data = get_booking_data()[0]
    print(data)
    return jsonify(data)



# API endpoint for recent bookings data
@app.route('/data/recent_bookings')
def recent_bookings():
    data = fetch_recent_bookings()
    return jsonify(data)

# API endpoint to get revenue graph
@app.route('/graph/revenue')
def revenue_graph():
    generate_revenue_graph()
    return send_file('static/revenue_graph.png', mimetype='image/png')



# API endpoint to get booking trend graph
@app.route('/graph/booking')
def booking_graph():
    generate_booking_trend()
    return send_file('static/booking_trend.png', mimetype='image/png')


    

if __name__ == '__main__':
    app.run(debug=False)
